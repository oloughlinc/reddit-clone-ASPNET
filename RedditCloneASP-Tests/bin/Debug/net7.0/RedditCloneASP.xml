<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedditCloneASP</name>
    </assembly>
    <members>
        <member name="M:RedditCloneASP.Controllers.CommentsController.GetComments(System.Int32)">
            <summary>
            Get the entire comment tree for a specific post
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:RedditCloneASP.Controllers.CommentsController.PostComment(RedditCloneASP.Models.PostComment)">
            <summary>
            Add a new comment to a post or another comment
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:RedditCloneASP.Builders.CommentsBuilder.BuildTreeFromComments(System.Collections.Generic.List{RedditCloneASP.Models.Comment})">
            <summary>
            Static method <c>BuildTreeFromComments</c> generates a nested array of transfer objects which each hold one<br/>
            or more <c>Comments</c>. This is the preferred method of sending data to a view member, as these objects <br/>
            are easily iterated and displayed on client-side.
            </summary>
            <param name="comments_list">A flat list of comment objects (List&lt;Comment&lt;), such as returned from a basic SQL query through EF.</param>
            <returns>A list of <c>CommentDTO</c> objects, each with their own nested list of replies.</returns>
        </member>
        <member name="M:RedditCloneASP.Builders.CommentsBuilder.Sort(System.Collections.Generic.List{RedditCloneASP.Models.CommentDTO},RedditCloneASP.Models.CommentValues)">
            <summary>
            Static method <c>CommentDTO.Sort</c> sorts a nested array list using a defined comparator and built-in List&lt;T&lt;.Sort(Comparator).
            Operates in average O(n log n) time for most cases.<br/>
            <see href="https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.sort?view=net-7.0"/>
            </summary>
            <param name="comment_tree">A populated list of CommentDTOs (List&lt;CommentDTO&lt;)</param>
            <param name="value">A <c>CommentValues</c> enum representing the field by which to sort. <see cref="T:RedditCloneASP.Models.CommentValues"/></param>
        </member>
        <member name="M:RedditCloneASP.Builders.CommentsBuilder.BuildNewComment(RedditCloneASP.Models.PostComment,System.String,RedditCloneASP.Models.Comment,RedditCloneASP.Models.Comment)">
            <summary>
            Static method <c>BuildNewComment</c> creates a new database comment from a <c>PostComment</c> reply as sent from a client.<br/>
            A verified poster must be supplied, along with the last sibling of this comment. Further, a parent <c>Comment</c> should be <br/>
            supplied if this comment is a a direct reply to another comment.
            </summary>
            <param name="comment">The <c>PostComment</c> model reply</param>
            <param name="poster">A verified string containing the poster username. This should be retrieved from a secured bearer token.</param>
            <param name="parent">If needed, the parent <c>Comment</c> from the database.</param>
            <param name="lastChild">The last sibling <c>Comment</c> from the database. Needed to properly increment storage path on database.></param>
            <returns>A new <c>Comment</c> properly serialized and ready for database insertion.</returns>
        </member>
        <member name="M:RedditCloneASP.Builders.CommentsBuilder.BuildNewComment(RedditCloneASP.Models.PostComment,System.String,RedditCloneASP.Models.Comment)">
            <summary>
            Static method <c>BuildNewComment</c> creates a new database comment from a <c>PostComment</c> reply as sent from a client.<br/>
            A verified poster must be supplied, along with the last sibling of this comment. Further, a parent <c>Comment</c> should be <br/>
            supplied if this comment is a a direct reply to another comment.
            </summary>
            <param name="comment">The <c>PostComment</c> model reply</param>
            <param name="poster">A verified string containing the poster username. This should be retrieved from a secured bearer token.</param>
            <param name="lastChild">The last sibling <c>Comment</c> from the database. Needed to properly increment storage path on database.></param>
            <returns>A new <c>Comment</c> properly serialized and ready for database insertion.</returns>
        </member>
        <member name="T:RedditCloneASP.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:RedditCloneASP.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:RedditCloneASP.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:RedditCloneASP.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:RedditCloneASP.Migrations.StoredProcedures.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:RedditCloneASP.Migrations.AuthDb.InitialCreateAuth">
            <inheritdoc />
        </member>
        <member name="M:RedditCloneASP.Migrations.AuthDb.InitialCreateAuth.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:RedditCloneASP.Migrations.AuthDb.InitialCreateAuth.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:RedditCloneASP.Migrations.AuthDb.InitialCreateAuth.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:RedditCloneASP.Models.CommentValues">
            <summary>
            <para>Enum <c>CommentValues</c> holds different possible field types for a <c>Comment</c> data class.<br/>
            Currently only Upsends is implemented. This is at the moment only used for referencing a sorting comparator. <br/>
            More sorting functions can be easily added by including a new <c>CommentValue</c> type and an associated sorter class,<br/>
            making this design more extensible.</para>
            </summary>
        </member>
        <member name="T:RedditCloneASP.Models.Comment">
            <summary>
            Class <c>Comment</c> is an Entity Framework Data Access Object which allows us to easily map class members to a database.
            </summary>
        </member>
        <member name="T:RedditCloneASP.Models.PublicComment">
            <summary>
            Class <c>PublicComment</c> represents the fields and value that need to be served by the API to the general consumer.
            This class hides data from the client that is necessary only for database retrieval and sorting.
            </summary>
        </member>
        <member name="M:RedditCloneASP.Models.PublicComment.#ctor(RedditCloneASP.Models.Comment)">
            <summary>
            Create a new <c>PublicComment</c> with values mapped from an internal <c>Comment</c> data access object.
            </summary>
            <param name="comment">Any single <c>Comment</c></param>
        </member>
        <member name="T:RedditCloneASP.Models.PostComment">
            <summary>
            Class <c>PostComment</c> represents the fields and values necessary for the client to provide for creating a new comment.
            </summary>
        </member>
    </members>
</doc>
